<!DOCTYPE html>
<html>
<head>
    <title>TS Advanced Filter</title>
    <!--  (c) 2015,2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Fri Apr 29 2016 20:39:43 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Apr 29 2016 20:39:43 GMT-0700 (PDT)";
        var CHECKSUM = 30848128122;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk-debug.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.override(Rally.ui.inlinefilter.ArtifactSearchField,{
    
    getFilter: function() {
        console.log('here');
        var value = this.lastValue;
        if (!Ext.isEmpty(value)) {
            var filters = [],
                models = [this.model];
                //models = this.model.getArtifactComponentModels();

            var onlyNumbers = new RegExp('^(\\d+)$');
            if (onlyNumbers.test(value) && this._isValidField(this.model, ['FormattedID'])) {
                filters.push({
                    property: 'FormattedID',
                    operator: 'contains',
                    value: value
                });
            }

            _.each(models, function(model) {
                var prefixPlusNumbers = new RegExp(Ext.String.format('^({0}\\d+)$', model.idPrefix), 'i');
                if (prefixPlusNumbers.test(value) && model.isArtifact()) {
                    filters.push(
                        Rally.data.wsapi.Filter.and([
                            {
                                property: 'TypeDefOid',
                                operator: '=',
                                value: model.typeDefOid
                            },
                            {
                                property: 'FormattedID',
                                operator: 'contains',
                                value: value
                            }
                        ])
                    );
                } else if (prefixPlusNumbers.test(value) && this._isValidField(model, ['FormattedID'])) {
                    filters.push({
                        property: 'FormattedID',
                        operator: 'contains',
                        value: value
                    });
                }
            }, this);

            if (this._isValidField(this.model, ['Name'])) {
                filters.push({
                    property: 'Name',
                    operator: 'contains',
                    value: value
                });
            }

            if (this._isValidField(this.model, ['Description'])) {
                filters.push({
                    property: 'Description',
                    operator: 'contains',
                    value: value
                });
            }

            return Rally.data.wsapi.Filter.or(filters);
        }
    }
});
Ext.define('CA.technicalservices.filter.AdvancedFilterQuickRow',{
    extend: 'Ext.container.Container',
    alias: 'widget.tsadvancedfilterquickrow',
    
    layout: 'hbox',
    
    items: [
        {
            xtype: 'container',
            itemId: 'filter_box',
            flex: 1,
            layout: 'hbox',
            defaults: {
                margin: '0 5 0 0'
            }
        },
        {
            xtype:'container',
            margin: 15,
            items: [
                {
                    xtype       : 'rallybutton',
                    itemId      : 'add_button',
                    disabled    : false,
                    text        : '+ Add Filter'
                }
            ]
        }
    ],
    
    config: {
        model: 'UserStory',
        filter: null,
        addQuickFilterConfig: {
            whiteListFields: ['ArtifactSearch']
        },
        fields: [],
        initialValues: {}
    },

    initComponent: function() {
        this.callParent(arguments);
        
        this.addEvents(
            /**
             * @event filteradd
             * Fires when a new filter box is added
             * @param {CA.technicalservices.filter.AdvancedFilterQuickRow} this the quick filter row
             * @param {} the filter box
             */
            'filteradd',
            
            /**
             * @event quickfilterchange
             * @param {CA.technicalservices.filter.AdvancedFilterQuickRow} this the quick filter row
             * @param [{Rally.data.wsapi.Filter}] wsapiFilters the filters selected
             */
            'quickfilterchange'
        );
//        
//        
        this.down('#add_button').on('click', this._showQuickFilterPopover, this);
//        
        if ( Ext.isString(this.model) ) {
            this._getModel(this.model).then({
                scope: this,
                success: function(model) {
                    this.model = model;
                    this._displaySelectors();
                },
                failure: function(msg) {
                    Ext.Msg.alert("Problem loading model for filter", msg);
                }
            });
        } else {
            this._displaySelectors();
        }
    },
    
    _displaySelectors: function() {
        var model = this.model,
            me = this;
            
        console.log("--", this.initialValues);
        Ext.Array.each(Ext.Object.getKeys(this.initialValues), function(field_name, idx){
            var newItem = me._createField(idx+1, field_name, me.initialValues);
            me.fields.push(newItem);
            me.down('#filter_box').insert(idx+1, newItem);
        });

    },
    
    _changeFieldValue: function(field) {
        this.fireEvent('quickfilterchange', this, this.getFilters());
    },
    
    _getModel: function(model_name) {
        var deferred = Ext.create('Deft.Deferred');
        
        Rally.data.ModelFactory.getModel({
            type: model_name,
            success: function(model) {
                deferred.resolve(model);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    _showQuickFilterPopover: function(button) {
        var addQuickFilterConfig = Ext.clone(this.addQuickFilterConfig);
            var blackList =  _.map(this.fields, 'name');
            
            if (addQuickFilterConfig && addQuickFilterConfig.whiteListFields) {
                addQuickFilterConfig.whiteListFields = _.reject(this.addQuickFilterConfig.whiteListFields, function(field){
                    return _.contains(blackList, field);
                });
            }
            
            this.addQuickFilterPopover = Ext.create('Rally.ui.popover.FieldPopover', {
                target: button.getEl(),
                placement: ['bottom', 'top', 'left', 'right'],
                fieldComboBoxConfig: _.merge({
                    model: this.model,
                    context: this.context || Rally.getApp().getContext(),
                    emptyText: 'Search filters...',
                    additionalFields: [
                        {
                            name: 'ArtifactSearch',
                            displayName: 'Search'
                        }
                    ],
                    blackListFields: blackList,
//                    _getModelNamesForDuplicates: function(field, fields) {
//                        var fieldCounts = _.countBy(fields, 'displayName');
//                        
//                        // TODO figure out what to do about using multiple record types
////                        if (fieldCounts[field.displayName] > 1) {
////                            return _.pluck(this.model.getModelsForField(field), 'displayName').join(', ');
////                        }
//                        return '';
//                    },
                    listeners: {
                        select: function(field, value) {
                            var fieldSelected = value[0].raw;
                            
                            this.addQuickFilterPopover.close();
                            this._onAddQuickFilterSelect(fieldSelected);
                        },
                        destroy: function(){
                            delete this.addQuickFilterPopover;
                        },
                        scope: this
                    }
                }, addQuickFilterConfig, function(a, b) {
                    if (_.isArray(a)) {
                        return a.concat(b);
                    }
                })
            });
    },

    _onAddQuickFilterSelect: function(field) {
        var index = this.fields.length;
        var newItem = this._createField(index + 1, field);
        this.fields.push(newItem);
        this.down('#filter_box').insert(index, newItem);
    },


    _createField: function(filterIndex, field, initialValues) {
        var fieldName = field.name || field,
            modelField = this.model.getField(fieldName),
            fieldConfig = Rally.ui.inlinefilter.FilterFieldFactory.getFieldConfig(this.model, fieldName, this.context),
            initialValue = initialValues && initialValues[fieldConfig.name] && initialValues[fieldConfig.name].rawValue;

        if (modelField && modelField.isDate() && initialValue) {
            initialValue = Rally.util.DateTime.fromIsoString(initialValue);
        }

        initialValue = Rally.ui.inlinefilter.FilterFieldFactory.getInitialValueForLegacyFilter(fieldConfig, initialValue);
        fieldConfig = Rally.ui.inlinefilter.FilterFieldFactory.getFieldConfigForLegacyFilter(fieldConfig, initialValue);

        Ext.applyIf(fieldConfig, {
            allowClear: true
        });
        
        Ext.merge(fieldConfig, {
            autoExpand: this.autoExpand,
            allowBlank: true,
            clearText: '-- Clear Filter --',
            hideLabel: false,
            beforeLabelTextTpl: [
                '<span class="filter-index">{[this.getFilterIndex()]}</span>',
                {
                    filterIndex: filterIndex,
                    displayIndex: this.isCustomMatchType(),
                    getFilterIndex: function() {
                        return this.displayIndex ? Ext.String.format('({0}) ', this.filterIndex) : '';
                    }
                }
            ],
            fieldLabel: '<span class="remove-quick-filter-icon icon-cross"></span>',
            labelAlign: 'top',
            labelSeparator: '',
            enableKeyEvents: true,
           // margin: 0,
            cls: this.isCustomMatchType() ? 'indexed-field' : '',
            model: this.model,
            context: this.context,
            operator: this._getOperatorForModelField(modelField),
            //afterSubTpl: ' <span class="remove-quick-filter-icon icon-cross"></span>',
            renderSelectors: {
                removeIcon: '.remove-quick-filter-icon'
            },
            listeners: {
                afterrender: function (field) {
                    field.removeIcon.on('click', _.partial(this._removeQuickFilter, field), this);
                },
                change: this._changeFieldValue,
                scope: this
            }
        });

        if (!_.isUndefined(initialValue)) {
            Ext.merge(fieldConfig, {
                value: initialValue
            });
        }

        if (_.isPlainObject(field)) {
            Ext.apply(fieldConfig, field);
        }

        if (filterIndex === 1) {
            fieldConfig.itemId = this.self.FOCUS_CMP_ITEM_ID;
        }

        if (this._shouldApplyFiltersOnSelect(fieldConfig)) {
            Ext.merge(fieldConfig, {
                autoSelect: true,
                listeners: {
                    //select: this._applyFilters,
                    scope: this
                }
            });
        } else {
            Ext.merge(fieldConfig, {
                listeners: {
                    //change: this._applyFilters,
                    scope: this
                }
            });
        }

        return Ext.widget(fieldConfig);
    },
    
    isCustomMatchType: function() {
        return this.matchType === 'CUSTOM';
    },

    _getOperatorForModelField: function(modelField) {
        var operator = '=';

        if (modelField && modelField.isCollection && modelField.isCollection()) {
            operator = 'contains';
        }

        return operator;
    },
    
    _removeQuickFilter: function(field) {
        var arrayIndex = field.beforeLabelTextTpl.filterIndex - 1;
        this.fields[arrayIndex] && this.fields[arrayIndex].destroy();
        this.fields.splice(arrayIndex, 1);
        this.updateFilterIndices();
        this.fireEvent('quickfilterchange', this, this.getFilters());

    },
    
    updateFilterIndices: function(matchType) {
        this.matchType = matchType || this.matchType;

        _.each(this.fields, function (field, index) {
            field.beforeLabelTextTpl.displayIndex = this.isCustomMatchType();
            field.beforeLabelTextTpl.filterIndex = index + 1;
            field.beforeLabelTextTpl.overwrite(field.labelEl.down('.filter-index'));
            if (this.isCustomMatchType()) {
                field.addCls('indexed-field');
            } else {
                field.removeCls('indexed-field');
            }
            if (Ext.isIE10m && field.inputEl) {
                field.setValue(field.getValue());
            }
        }, this);
    },

    _shouldApplyFiltersOnSelect: function(fieldConfig) {
        var field = this.model.getField(fieldConfig.name),
            attributeDefinition = field && field.attributeDefinition;

        return attributeDefinition &&
            (attributeDefinition.Constrained || attributeDefinition.AttributeType === 'OBJECT') &&
            !fieldConfig.multiSelect;
    },

    getFilters: function() {
        var filters = [];
        _.each(this.fields, function(field, index) {
            if (field.name === 'ModelType') {
                return;
            }

            if (!Ext.isEmpty(field.lastValue) && !field.hasActiveError()) {

                var lastValue = field.lastValue;

                var isRefUri = Rally.util.Ref.isRefUri(lastValue);
                var isRefOid = _.isNumber(Rally.util.Ref.getOidFromRef(lastValue));
                if (isRefUri && isRefOid && field.valueField === '_ref' && field.noEntryValue !== lastValue) {
                    var record = field.getRecord();
                    if (record) {
                        var uuidRef = record.get('_uuidRef');
                        if (uuidRef) {
                            lastValue = uuidRef;
                        }
                    }
                }

                var filter = _.isFunction(field.getFilter) ? field.getFilter() : Rally.data.wsapi.Filter.fromExtFilter({
                    property: field.name,
                    operator: field.operator,
                    value: lastValue
                });

                if(filter) {

                    if (field.allowNoEntry && field.noEntryValue === lastValue) {
                        filter.value = null;
                    }

                    Ext.apply(filter, {
                        name: field.name,
                        rawValue: lastValue,
                        filterIndex: index + 1
                    });

                    filters.push(filter);
                }
            }
        }, this);
        
        var filter_hash = {};
        Ext.Array.each(filters, function(filter){ filter_hash[filter.name] = filter; });
        
        return Ext.Object.getValues(filter_hash);
    }
});
Ext.define('CA.technicalservices.filter.AdvancedFilterRow',{
    extend: 'Ext.container.Container',
    alias: 'widget.tsadvancedfilterrow',
    
    layout: 'hbox',
    
    items: [
        {
            xtype       : 'rallybutton',
            itemId      : 'addButton',
            cls         : 'secondary rly-small icon-plus',
            margin      : '3px 0px 0px 3px',
            disabled    : false,
            text        : ' '
        },
        {
            xtype       : 'rallybutton',
            itemId      : 'removeButton',
            cls         : 'secondary rly-small icon-minus',
            margin      : '3px 3px 0px 0px',
            text        : ' '
        },
        {
            xtype  : 'container',
            itemId : 'filterFieldBox'
        },
        {
            xtype  : 'container',
            itemId : 'filterOperatorBox'
        },
        {
            xtype  : 'container',
            itemId : 'filterOperatorBox'
        },
        {
            xtype  : 'container',
            itemId : 'filterValueBox'
        },
        {
            xtype  : 'container',
            flex   : 1
        },
        { 
            xtype  : 'container',
            itemId : 'filterMatchBox'
        },
        {
            xtype  : 'container',
            itemId : 'filterClearBox'
        }
    ],
    
    config: {
        model: 'UserStory',
        
        filter: null
        
    },

    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);
        
        this.addEvents(
            /**
             * @event rowadd
             * Fires when row add button is pushed
             * @param {CA.technicalservices.filter.AdvancedFilterRow} this the filter
             */
            'rowadd',
            
            /**
             * @event filterchanged
             * Fires when filter has field + operator + value selected
             * @param {CA.technicalservices.filter.AdvancedFilterRow} this the filter
             * @param {Rally.data.wsapi.Filter} wsapiFilter the filter selected
             */
            'filterchanged',
            
            /**
             * @event filterremoved
             * Fires when a filter is cleared
             * @param {CA.technicalservices.filter.AdvancedFilterRow} this the empty row
             */
            'filterremoved'
        );
        
        
        this.down('#addButton').on('click', this._requestAdd, this);
        this.down('#removeButton').on('click', this.clearFilters, this);
        
        if ( Ext.isString(this.model) ) {
            this._getModel(this.model).then({
                scope: this,
                success: function(model) {
                    this.model = model;
                    this._displaySelectors();
                },
                failure: function(msg) {
                    Ext.Msg.alert("Problem loading model for filter", msg);
                }
            });
        } else {
            this._displaySelectors();
        }
    },
    
    _requestAdd: function() {
        //this.down('#addButton').setDisabled(true);
        this.fireEvent('rowadd');
    },
    
    _getModel: function(model_name) {
        var deferred = Ext.create('Deft.Deferred');
        
        Rally.data.ModelFactory.getModel({
            type: model_name,
            success: function(model) {
                deferred.resolve(model);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    _displaySelectors: function() {
        this._addFieldSelector();
        this._addOperatorSelector();
    },
    
    _addFieldSelector: function() {
        var container = this.down('#filterFieldBox');
        container.removeAll();
        
        var value = null;
        if (! Ext.isEmpty(this.filter) ) {
            value = this.filter.config && this.filter.config.property || this.filter.property;
        }
        container.add({
            xtype: 'rallyfieldcombobox',
            itemId: 'fieldCombobox',
            model: this.model,
            value: value,
            _isNotHidden: this._allowFieldInDropDown,
            listeners: {
                scope: this,
                change: function(cb) {
                    this._addOperatorSelector(cb);
                }
            }
        });
    },
    
    _allowFieldInDropDown: function(field) {
        if ( field.hidden ) { 
            return false;
        }
        var blacklist = ["PredecessorsAndSuccessors","ObjectUUID","VersionId", "DragAndDropRank",
            "Attachments", "Tasks", "TestCases", "Predecessors", "Successors", "Tags", "Changesets",
            "Children", "Defects", "Discussion", "Milestones",
            "Feature",  "PortfolioItem", "Parent", "Subscription", "Project"];
    
        if ( Ext.Array.contains(blacklist, field.name) ) {
            return false;
        }
        
        var attributeDefn = field.attributeDefinition;
        
        if ( attributeDefn ) {
            if ( !attributeDefn.Filterable ) {
                return false;
            }
        }
        return true;
    },
    
    _addOperatorSelector: function() {
        var container = this.down('#filterOperatorBox');
        container.removeAll();
        var store = Ext.create('Ext.data.Store', {
            fields: ['name', 'displayName']
        });
        
        var field_selector = this.down('#fieldCombobox');
        var disabled = true;
        
        if ( !Ext.isEmpty(field_selector) ) {
            var field_name = field_selector.getValue();
            if ( ! Ext.isEmpty(field_name) ) {
                var field = this.model.getField(field_name);
               
                var store = field.getAllowedQueryOperatorStore();
                store.load();
                disabled = false;
            }
        }
        
        var value = null;
        if (! Ext.isEmpty(this.filter) ) {
            value = this.filter.config && this.filter.config.operator || this.filter.operator;
        }
        
        container.add({
            xtype: 'rallycombobox',
            itemId: 'operatorCombobox',
            disabled: disabled,
            autoLoad: false,
            value: value,
            editable: false,
            forceSelection: true,
            store: store,
            displayField: 'OperatorName',
            valueField: 'OperatorName',
            matchFieldWidth: true,
            listeners: {
                scope : this,
                change: this._createFilter,
                ready : this._addValueSelector
            }
        });
    },
    
    _addValueSelector: function(cb) {
        var container = this.down('#filterValueBox');
        container.removeAll();
        
        var editor = {
            xtype: 'rallytextfield',
            disabled: true,
            autoLoad: false,
            editable: false,
            forceSelection: true,
            matchFieldWidth: true
        };
        
        var field_selector = this.down('#fieldCombobox');
        
        if ( !Ext.isEmpty(field_selector) ) {
            var field_name = field_selector.getValue();
            if ( ! Ext.isEmpty(field_name) ) {
                if ( field_name == "ScheduleState" ) {
                    editor = this._getScheduleStateEditor();
                } else {
                    var field = this.model.getField(field_name);
                    editor = Rally.ui.renderer.GridEditorFactory.getEditor(field);
                }
            }
           
            
            if ( editor.xtype == "rallytextfield" ) {
                editor.height = 22;
            }
            
            if ( /editor/.test(editor.xtype) ) {
                editor = this._useModifiedEditor(editor,field);
            }
            
            editor.listeners = {
                scope : this,
                change: this._createFilter
            }
            
            if ( editor.xtype == 'rallycombobox' ) {
                editor.allowNoEntry = true;
            }
            editor.itemId = 'valueCombobox';
            
            var value_field = container.add(editor);
            
            if (! Ext.isEmpty(this.filter) ) {
                value = this.filter.config && this.filter.config.value || this.filter.value;
                value_field.setValue(value);
            }
        }
    },
    
    _useModifiedEditor: function(editor, field) {
        var editor_config = editor.field;
        if ( editor_config.xtype == 'rallyfieldvaluecombobox' ) {
            editor_config.model = this.model.elementName;
            editor_config.field = field.name;
        }
        
        if ( editor_config.xtype == 'rallyiterationcombobox'  || editor_config.xtype == 'rallyreleasecombobox') {
            editor_config.defaultToCurrentTimebox = true;
            delete editor_config.storeConfig;
        }
        
        return editor_config;
    },
    
    _getScheduleStateEditor: function() {
        return {
            xtype: 'rallyfieldvaluecombobox',
            model: this.model,
            field: 'ScheduleState'
        };
    },
    
    _createFilter: function() {
        var field_selector    = this.down('#fieldCombobox');
        var operator_selector = this.down('#operatorCombobox');
        var value_selector    = this.down('#valueCombobox');
        
        if ( Ext.isEmpty(field_selector) || Ext.isEmpty(operator_selector) || Ext.isEmpty(value_selector) ) {
            return;
        }
        
        var property = field_selector.getValue();
        var operator = operator_selector.getValue();
        var value = value_selector.getValue();
        this.filter = null;
        if ( !Ext.isEmpty(property) && !Ext.isEmpty(operator) ) {
            this.filter = Ext.create('Rally.data.wsapi.Filter',{ property: property, operator: operator, value: value });
        }
        this.fireEvent('filterchanged', this, this.filter);
        //this.down('#addButton').setDisabled(false);
    },
    
    clearFilters: function() {
        var field_selector    = this.down('#fieldCombobox');
        var operator_selector = this.down('#operatorCombobox');
        var value_selector    = this.down('#valueCombobox');
        
        value_selector.setValue(null);
        field_selector.setValue(null);
        this.filter = null;
        
        this.fireEvent('filterremoved',this);
        this.fireEvent('filterchanged',this, null);
        //this.down('#addButton').setDisabled(true);
    },
    
    getFilter: function() {
        return this.filter;
    }
    
});
Ext.define('CA.technicalservices.filter.AdvancedFilter',{
    extend: 'Ext.container.Container',
    alias: 'widget.tsadvancedfilter',
    
    items: [
        {
            xtype           : 'rallybutton',
            itemId          : 'filterButton',
            cls             : 'secondary',
            text            : '<span class="icon-filter"> </span>',
            toolTipText     : 'Show Filters',
            _filterDisplay  : 'hidden'
        },
        { 
            xtype: 'container',
            layout: 'hbox',
            items: [
                {
                    xtype       : 'container',
                    itemId      : 'filterBox'
                },
                {
                    xtype       : 'container',
                    itemId      : 'selectorBox',
                    flex        : 1
                }
            ]
        }
    ],
    
    rows: [],
    filters: [],
    quickFilters: [],
    operator: 'and',
    
    config: {
        /**
         *  {Boolean} true to allow user to show/add advanced filter rows
         */
        allowAdvancedFilters: true,
        
        allowQuickFilters: true
    },

    /**
     * Gets the current state of the object. 
     * @return {Object} The current state
     */
    getState: function(){
        return { 
            filters: this._getFilterConfigs(),
            operator: this.operator,
            quickFilterMap: this._getQuickFilterConfig(),
            quickFilters: this.quickFilters
        };
    },
    
    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
        this._setButton();
        this.down('#filterButton').on('click', this._showHideFilters, this);
        if ( this.quickFilters && this.quickFilters.length > 0 ) {
            this.fireEvent('filterselected', this, this.quickFilters);
        }
    },

    initComponent: function() {
        this.callParent(arguments);

        this.addEvents(
            /**
             * @event filterselected
             * Fires when 
             * @param {CA.technicalservices.filter.AdvancedFilter} this the filter
             * @param {Rally.data.wsapi.Filter} wsapiFilter the filter selected
             */
            'filterselected'
        );
    },
    
    _showHideFilters: function(button) {
        if (button._filterDisplay == "visible" ) {
            button.toolTipText = 'Show Filters';
            button._filterDisplay = "hidden";
            this._hideFilters();
            return;
        } 
        button.toolTipText = 'Hide Filters';
        button._filterDisplay = "visible";
        this._showFilters();
    },
    
    _addRow: function(filter) {
        this.down('#filterBox').add({
            xtype:'tsadvancedfilterrow',
            filter: filter,
            listeners: {
                scope: this,
                rowadd: this._addRow,
                filterchanged: this._changeFilter
            }
        });
        
        this.rows = Ext.ComponentQuery.query('tsadvancedfilterrow');
    },
    
    _addQuickRow: function() {
        
        this.down('#filterBox').add({
            xtype:'tsadvancedfilterquickrow',
            initialValues: this.quickFilterMap,
            listeners: {
                scope: this,
                quickfilterchange: function(row, filters) {
                    console.log('filters:', filters);
                    this.quickFilters = filters;
                    this.quickFilterMap = this._getQuickFilterConfig();
                    this._setButton();
                    this.fireEvent('filterselected', this, filters);
                }
            }
        });
    },
    
    _showFilters: function() {
        var filter_box = this.down('#filterBox');
        filter_box.removeAll();
        
        if ( this.allowQuickFilters ) {
            this._addQuickRow();
        }
        
        if ( this.allowAdvancedFilters ) {
            if ( this.filters.length === 0 ) {
                this._addRow();
            } else {
                Ext.Array.each(this.filters, function(filter){
                    this._addRow(filter);
                }, this);
            }
            
            var selector_box = this.down('#selectorBox');
            selector_box.removeAll();
            var store = Ext.create('Rally.data.custom.Store',{
                data: [
                    {name:'All', value: 'and'},
                    {name:'Any', value: 'or'}
                ]
            });
            
            selector_box.add({
                xtype: 'rallycombobox',
                displayField: 'name',
                valueField: 'value',
                store: store,
                value: this.operator,
                listeners: {
                    scope: this,
                    change: function(cb) {
                        this.operator = cb.getValue();
                        this._setFilters();
                    }
                }
            });
        }
        
    },
    
    _hideFilters: function() {
        var filter_box = this.down('#filterBox');
        filter_box.removeAll();
        var selector_box = this.down('#selectorBox');
        selector_box.removeAll();
    },
    
    _changeFilter: function(row, filter) {
        this._setFilters();
    },
    
    _setFilters: function() {
        var me = this;
        
        this.filters = [];
        
        Ext.Array.each(this.rows, function(row) {
            var filter = row.getFilter();
            if ( Ext.isEmpty(filter) ) { return; }
            me.filters.push(filter);
        });
        
        var combined_filters = Rally.data.wsapi.Filter.and(this.filters);
        if ( this.operator == 'or' ) {
            combined_filters = Rally.data.wsapi.Filter.or(this.filters);
        }
        
        this.fireEvent('filterselected', this, combined_filters);
        this._setButton();
    },
    
    _setButton: function() {
        var button = this.down('#filterButton');
        
        if ( ( this.filters && this.filters.length > 0 ) || ( this.quickFilters && this.quickFilters.length > 0 ) ) {
            var count = this.filters && this.filters.length || 0;
            if ( count === 0 ) {
                count = this.quickFilters && this.quickFilters.length;
            }
            
            button.setText('<span class="icon-filter"> </span> (' + count + ')');
            button.addCls('reverse');
            return;
        }
        
        button.setText('<span class="icon-filter"> </span>');
        button.removeCls('reverse');
    },
    
    _getFilterConfigs: function() {
        return Ext.Array.map(this.filters, function(filter) {
            return filter.config;
        });
    },
    
    getFilters: function() {
        return this.quickFilters || [];
    },
    
    _getQuickFilterConfig: function() {
        var filter_map = {};
        Ext.Array.each(this.quickFilters, function(filter) {
            filter_map[filter.name] = filter;
        });
        return filter_map;
    }
    
});
Ext.define("TSAdvancedFilter", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'message_box',tpl:'Hello, <tpl>{_refObjectName}</tpl>'},
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "TSAdvancedFilter"
    },
                        
    launch: function() {
        this.add({
            xtype:'tsadvancedfilter',
            stateful: true,
            stateId: 'ts2',
            allowAdvancedFilters: false,
            allowQuickFilters: true,
            stateEvents: ['filterselected'],
            listeners: {
                scope: this,
                filterselected: function(advanced_filter, filters) {
                    if ( ! Ext.isEmpty(filters) ) {
                        console.log('Found Filters', filters.toString());
                    } else {
                        console.log('No filters');
                    }
                }
            }
        });
    },
      
    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        this.logger.log("Starting load:",config.model);
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    _loadAStoreWithAPromise: function(model_name, model_fields){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:",model_name,model_fields);
          
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(this);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    _displayGrid: function(store,field_names){
        this.down('#display_box').add({
            xtype: 'rallygrid',
            store: store,
            columnCfgs: field_names
        });
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('TSAdvancedFilter', {
                   name: 'TS Advanced Filter'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
.remove-quick-filter-icon {
    float: left;
    color: #00a9e0;
}
    </style>

</head>
<body></body>
</html>